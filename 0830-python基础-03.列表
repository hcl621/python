本节目标
掌握列表的常见操作

课程内容
a.序列
b.列表
c.列表的应用场景
d.访问列表
e.列表索引、切片
f.列表的拼接
g.列表的更新
h.列表的删除
i.补充

a.序列
序列是python中最基本的数据结构
序列中每个元素分配一个数字标识他们的位置，也就是索引
python中有6种序列类型，列表和元组使用的最多
序列都可以进行索引、切片、拼接

b.列表的应用场景
	1.商品加入购物车
	2.自动化投简历屏蔽某些公司
	3.爬虫页面屏蔽信息

c.列表
列表是python中常用的数据类型，中括号中逗号分开元素，元素可以不是同一种类型
li=[1,2,3,4]
li2=['heygor',1,'ladeng',2]
li3=[1,2,[3,4],5]

d.列表的访问
	1.直接访问
	2.遍历访问
	3.成员运算符访问

e.列表的索引和切片
索引可以理解为下标，左侧从0开始，右侧从-1开始
li=[1,2,3]
print(li[0])
print(li[-2])
print(li[5])
注意报错(索引超出范围)
IndexError: list index out of range

print(li[:-1])
print(li[1:])
print(li[1:2])

f.列表的拼接
li=[1,2,3]
li2=[4,5,6]
print(li+li2)

g.列表的更新
更新可以通过索引找到对应元素，并且赋值进行修改
li=[1,2,3]
print(li)
li[2]=100
print(li)
li[-1]=30
print(li)

h.列表的删除
del 可以删除指定元素，也可以删除整个列表
li=['a','b','c']
print(li)
del li[1]
print(li)

i.补充
	insert(索引，值)  插入
	extend           扩展(元素、列表)
	index            第一次出现的索引
	enumerate        枚举
	a.栈的方式访问列表
	b.获取列表索引
	c.enumerate
	d.列表的排序
	e.列表推导式

	a.栈的方式访问列表
		1>队列    先进先出，后进后出
		2>栈      先进后出，后进先出
	b.获取列表索引
	c.enumerate 枚举
	d.列表的排序
		list.reverse()  反向打印
		list.sort()     排序
	e.列表推导式
		列表推导式又叫列表解析式，提供一种简单方法创建列表
		结构中包含一个表达式，可以有0个或者多个if语句，表达式是任意类型对象，返回结果是一个新的列表

		优势
			1>代码短，可读性好
			2>速度快

		列表推导式
			标准格式
			[表达式 for 变量 in 列表]
			[表达式 for 变量 in 列表 if 条件]

补充：查看帮助方式
进入到python3环境，输入help(list)

